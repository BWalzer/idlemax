from idlescape.character import Character, Base, Activity, CharacterActivity
import sqlalchemy
import sqlalchemy.orm
import functools
from dataclasses import dataclass
from typing import Optional
import json
import pendulum


@dataclass
class CharacterData:
    character_id: int
    character_name: str


@dataclass
class ActivityData:
    activity_id: int
    activity_name: str
    activity_type: str


@dataclass
class CharacterActivityData:
    character_activity_id: int
    activity_id: int
    character_id: int
    started_at: pendulum.datetime
    ended_at: Optional[pendulum.datetime]


def character_to_data(character: Character) -> CharacterData:
    return CharacterData(character_id=character.character_id, character_name=character.character_name)


def activity_to_data(activity: Activity) -> ActivityData:
    return ActivityData(
        activity_id=activity.activity_id, activity_name=activity.activity_name, activity_type=activity.activity_type
    )


def character_activity_to_data(character_activity: CharacterActivity) -> CharacterActivityData:
    return CharacterActivityData(
        character_activity_id=character_activity.character_activity_id,
        activity_id=character_activity.activity_id,
        character_id=character_activity.character_id,
        started_at=character_activity.started_at,
        ended_at=character_activity.ended_at,
    )


def with_session(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with sqlalchemy.orm.Session(self.engine) as session:
            try:
                result = func(self, *args, session=session, **kwargs)
                session.commit()
                return result
            except Exception:
                session.rollback()
                raise

    return wrapper


class Game:
    def __init__(self, db_filepath: str = "sqlite:///idlescape.db"):
        self.engine = sqlalchemy.create_engine(db_filepath)
        Base.metadata.create_all(self.engine)
        self.load_activities()

    @with_session
    def load_activities(self, session: sqlalchemy.orm.Session = None) -> None:
        session.query(Activity).delete()
        with open("activities.json", "r") as f:
            activities = json.load(f)
        for activity in activities:
            session.add(Activity(**activity))

    @with_session
    def create_character(self, character_name: str, session: sqlalchemy.orm.Session = None) -> CharacterData:
        char = Character(character_name=character_name)
        session.add(char)
        session.flush()  # To get autogenerated fields like character_id
        return character_to_data(char)

    @with_session
    def get_character_by_name(
        self,
        character_name: str,
        session: sqlalchemy.orm.Session = None,
    ) -> Optional[CharacterData]:
        char = session.query(Character).filter_by(character_name=character_name).one_or_none()
        if not char:
            return None
        return character_to_data(char)

    @with_session
    def get_activity_by_name(self, activity_name: str, session: sqlalchemy.orm.Session = None) -> ActivityData:
        activity = session.query(Activity).filter_by(activity_name=activity_name).one()
        return activity_to_data(activity)

    @with_session
    def start_activity(self, character_name: str, activity_name: str, session: sqlalchemy.orm.Session = None) -> None:
        char_data = self.get_character_by_name(character_name=character_name)
        activity_data = self.get_activity_by_name(activity_name)
        activity = CharacterActivity(character_id=char_data.character_id, activity_id=activity_data.activity_id)
        session.add(activity)

    @with_session
    def get_current_activity(
        self, character_name: str, session: sqlalchemy.orm.Session = None
    ) -> CharacterActivityData:
        character = self.get_character_by_name(character_name)
        character_activity = (
            session.query(CharacterActivity).filter_by(character_id=character.character_id, ended_at=None).one_or_none()
        )
        if not character_activity:
            return None
        return character_activity_to_data(character_activity)

    @with_session
    def stop_current_activity(self, character_name, session: sqlalchemy.orm.Session = None) -> None:
        char = session.query(Character).filter_by(character_name=character_name).one()
        current_activity = (
            session.query(CharacterActivity).filter_by(character_id=char.character_id, ended_at=None).one()
        )

        current_activity.ended_at = pendulum.now("utc")
