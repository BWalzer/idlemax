import functools
import json
from typing import Optional

import pendulum
import sqlalchemy
import sqlalchemy.orm

from idlescape.character import Activity, Base, Character, CharacterActivity, CharacterSkill
from idlescape.game_data import (
    ActivityData,
    CharacterActivityData,
    CharacterData,
    CharacterItem,
    CharacterItemData,
    Item,
    ItemData,
    activity_to_data,
    character_activity_to_data,
    character_item_to_data,
    character_to_data,
    item_to_data,
)


def with_session(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with sqlalchemy.orm.Session(self.engine) as session:
            try:
                result = func(self, *args, session=session, **kwargs)
                session.commit()
                return result
            except Exception:
                session.rollback()
                raise

    return wrapper


class Game:
    """
    Lifetime of this object should only be one public method call.
    """

    def __init__(self, db_filepath: str = "sqlite:///idlescape.db"):
        self.engine = sqlalchemy.create_engine(db_filepath)
        Base.metadata.create_all(self.engine)

        with sqlalchemy.orm.Session(self.engine) as session:
            self._load_activities(session)
            self._load_items(session)
            session.commit()

    def _load_items(self, session: sqlalchemy.orm.Session) -> None:
        session.query(Item).delete()
        with open("idlescape/data/items.json", "r") as f:
            items: list[dict] = json.load(f)
        for item in items:
            session.add(Item(**item))

    def _load_activities(self, session: sqlalchemy.orm.Session) -> None:
        session.query(Activity).delete()
        with open("idlescape/data/activities.json", "r") as f:
            activities: list[dict] = json.load(f)
        for activity in activities:
            session.add(Activity(**activity))

    def _init_character_skills(self, character_name: str, session: sqlalchemy.orm.Session):
        char: Character = session.query(Character).filter_by(character_name=character_name).one()
        skills: list[Activity] = session.query(Activity).filter_by(activity_type="skill").all()
        for skill in skills:
            char_skill = (
                session.query(CharacterSkill)
                .filter_by(character_id=char.character_id, activity_id=skill.activity_id)
                .one_or_none()
            )
            if not char_skill:
                new_char_skill = CharacterSkill(character_id=char.character_id, activity_id=skill.activity_id)
                session.add(new_char_skill)

    @with_session
    def create_character(self, character_name: str, session: sqlalchemy.orm.Session) -> CharacterData:
        char = Character(character_name=character_name)
        session.add(char)
        session.flush()  # To get autogenerated fields like character_id
        self._init_character_skills(character_name, session)
        return character_to_data(char, session)

    @with_session
    def get_character_by_name(self, character_name: str, session: sqlalchemy.orm.Session) -> Optional[CharacterData]:
        character = self._get_character_by_name(character_name, session)
        if not character:
            return None
        return character_to_data(character, session)

    def _get_character_by_name(self, character_name: str, session: sqlalchemy.orm.Session) -> Optional[Character]:
        return session.query(Character).filter_by(character_name=character_name).one_or_none()

    @with_session
    def get_activity_by_name(self, activity_name: str, session: sqlalchemy.orm.Session) -> ActivityData:
        activity = session.query(Activity).filter_by(activity_name=activity_name).one()
        return activity_to_data(activity)

    @with_session
    def start_activity(self, character_name: str, activity_name: str, session: sqlalchemy.orm.Session) -> None:
        character = self._get_character_by_name(character_name, session)
        activity_data = self.get_activity_by_name(activity_name)
        character_activity = (
            session.query(CharacterActivity).filter_by(character_id=character.character_id, ended_at=None).one_or_none()
        )
        if character_activity:
            self._stop_current_activity(character_name, session)
        activity = CharacterActivity(character_id=character.character_id, activity_id=activity_data.activity_id)
        session.add(activity)

    def _stop_current_activity(self, character_name: str, session: sqlalchemy.orm.Session) -> None:
        character = self._get_character_by_name(character_name, session)
        ended_at = pendulum.now("utc")
        current_activity = (
            session.query(CharacterActivity).filter_by(character_id=character.character_id, ended_at=None).one()
        )
        current_activity.ended_at = ended_at

        # Figure out how much skill XP to give
        # For now, give XP per second
        # TODO: Skill xp rates
        activity_data = character_activity_to_data(current_activity, session)
        activity_duration = ended_at.diff(activity_data.started_at).seconds

        char_skill: CharacterSkill = (
            session.query(CharacterSkill)
            .filter_by(character_id=character.character_id, activity_id=current_activity.activity_id)
            .one()
        )
        char_skill.experience += activity_duration

    @with_session
    def get_current_activity(self, character_name: str, session: sqlalchemy.orm.Session) -> CharacterActivityData:
        character = self._get_character_by_name(character_name, session)
        character_activity = (
            session.query(CharacterActivity).filter_by(character_id=character.character_id, ended_at=None).one_or_none()
        )
        if not character_activity:
            return None
        return character_activity_to_data(character_activity, session)

    @with_session
    def stop_current_activity(self, character_name, session: sqlalchemy.orm.Session) -> None:
        self._stop_current_activity(character_name, session)

    @with_session
    def get_all_characters(self, session: sqlalchemy.orm.Session) -> list[CharacterData]:
        characters = session.query(Character).all()

        return [character_to_data(character, session) for character in characters]
