from idlescape.character import Character, Base
import sqlalchemy
import sqlalchemy.orm
import functools
from dataclasses import dataclass
from typing import Optional


@dataclass
class CharacterData:
    character_id: int
    character_name: str
    # created_at_utc: pendulum.datetime


def character_to_data(character: Character) -> CharacterData:
    return CharacterData(
        character_id=character.character_id,
        character_name=character.character_name,
        # created_at_utc=character.created_at_utc,
    )


def with_session(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with sqlalchemy.orm.Session(self.engine) as session:
            try:
                result = func(self, *args, session=session, **kwargs)
                session.commit()
                return result
            except Exception:
                session.rollback()
                raise

    return wrapper


class Game:
    def __init__(self, db_filepath: str = "sqlite:///idlescape.db"):
        self.engine = sqlalchemy.create_engine(db_filepath)
        Base.metadata.create_all(self.engine)

    @with_session
    def create_character(self, character_name: str, session=None) -> CharacterData:
        char = Character(character_name=character_name)
        session.add(char)
        session.flush()  # To get autogenerated fields like character_id
        return character_to_data(char)

    @with_session
    def get_character_by_name(self, character_name: str, session=None) -> Optional[CharacterData]:
        char = session.query(Character).filter_by(character_name=character_name).one()
        print(char.character_name)
        if not char:
            return None
        return character_to_data(char)
